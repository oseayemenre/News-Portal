generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  email          String?   @unique
  hashedPassword String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  posts          Posts[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.String
  refresh_token     String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  categoryName  String        @unique
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  posts         Posts[]
  subCategories SubCategory[]
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.ObjectId
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Pages {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  pageName    String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Posts {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  postTitle     String      @unique
  postDetails   String
  readTime      Int
  postCategory  String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  postImage     String
  adminId       String      @db.ObjectId
  categoryId    String      @db.ObjectId
  subCategoryId String      @db.ObjectId
  bgColor       String
  comments      Comments[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  admins        User        @relation(fields: [adminId], references: [id], onDelete: Cascade)
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
}

model SubCategory {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  subCategory       String   @unique
  subCatDescription String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  posts             Posts[]
  categoryId        String   @db.ObjectId
  category          Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}
